Question 1. Compare kern/mpentry.S side by side with boot/boot.S. Bearing in mind that kern/mpentry.S is compiled and linked to run above KERNBASE just like everything else in the kernel, what is the purpose of macro MPBOOTPHYS? Why is it necessary in kern/mpentry.S but not in boot/boot.S? In other words, what could go wrong if it were omitted in kern/mpentry.S? 
Hint: recall the differences between the link address and the load address that we have discussed in Lab 1.

Answer: boot/boot.S runs in real mode, so it doesn't need any help accessing gdt, but kern/mpentry.S must start at 4096-byte boundary, so it needs MPBOOTPHYS macro for address translation.


Question 2. It seems that using the big kernel lock guarantees that only one CPU can run the kernel code at a time. Why do we still need separate kernel stacks for each CPU? Describe a scenario in which using a shared kernel stack will go wrong, even with the protection of the big kernel lock.

Answer: So that current CPU cannot accidentally ruin other CPUs' kernel stack. A scenario in which using a shared kernel stack will go wrong is when current CPU returns to a much higher place in stack and erases data on stack that was used by some other CPU.


Question 3. In your implementation of env_run() you should have called lcr3(). Before and after the call to lcr3(), your code makes references (at least it should) to the variable e, the argument to env_run. Upon loading the %cr3 register, the addressing context used by the MMU is instantly changed. But a virtual address (namely e) has meaning relative to a given address context--the address context specifies the physical address to which the virtual address maps. Why can the pointer e be dereferenced both before and after the addressing switch?

Answer: ?

Question 4. Whenever the kernel switches from one environment to another, it must ensure the old environment's registers are saved so they can be restored properly later. Why? Where does this happen?

Answer: So that environment can continue doing what it was doing before like there was no switch. This happens in kern/trapentry.S in _alltraps whith pushal instruction. It is then restored in kern/env.c in env_pop_tf with popal instruction.
