Question 1. What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

Answer: The purpose of having an indivudual handler function for every interrupt even if all interrupts are delivered to the same handler, is to have possiblity to distinguish what kind of interrupt/exeption we are handling right now and maybe do something differently for specific interrupts/exeptions.


Question 2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint's code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint's int $14 instruction to invoke the kernel's page fault handler (which is interrupt vector 14)?

Answer: I did not do anything to make user/softint program behave correctly - it already produces  a general protection fault.
This happens because user programms doesn't have permissions to access page fault (interrupt vector 14).
If I change permission level to 3 at SETGATE function call for 14th interrupt, then the page fault trap is produced.


Question 3. The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?

Answer: The general protection fault (which I had at the beginning of Exercise 6) is invoked if entry for break point execption in IDT is set with kernel permission level, meaning that it is not possible to invoke this exception from user space. To get it work correctly I needed to change permission level to user (3).


Question 4. What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?

Answer: The point of these mechanisms is not to allow user rise specific exceptions. That's because there is a specific error handling for each exception that might do something that user shouldn't have access to and that user shouldn't be able to do (in user/softint cese user shouldn't be able to rise page fault exception and get a page he or she doesn't have access to).
